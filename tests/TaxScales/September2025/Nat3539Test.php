<?php

namespace ManageIt\PaygTax\Tests\TaxScales\September2025;

use ManageIt\PaygTax\PaygTax;
use ManageIt\PaygTax\Tests\Fixtures\Earning;
use ManageIt\PaygTax\Tests\Fixtures\Payee;
use ManageIt\PaygTax\Tests\Fixtures\Payer;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Assert;

/**
 * @covers \ManageIt\PaygTax\TaxScales\Nat3539
 */
class Nat3539Test extends TestCase
{
    /**
     * @dataProvider weeklyData
     */
    public function testWeeklyWithholding(
        int $gross,
        float $scale1,
        float $scale2,
        float $scale3,
        float $scale5,
        float $scale6
    ): void {
        $payer = new Payer();

        $payee = new Payee();
        $payee->payCycle = Payee::PAY_CYCLE_WEEKLY;
        $payee->residencyStatus = Payee::RESIDENT;
        $payee->tfn = true;
        $payee->claimsTaxFreeThreshold = false;
        $payee->stsl = true;

        $earning = new Earning();
        $earning->date = new \DateTime('2025-09-30');
        $earning->gross = $gross;

        // Scale 1

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale1, $payg->getTaxWithheldAmount());

        // Scale 2

        $payee->claimsTaxFreeThreshold = true;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale2, $payg->getTaxWithheldAmount());

        // Scale 3

        $payee->residencyStatus = Payee::FOREIGN_RESIDENT;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale3, $payg->getTaxWithheldAmount());

        // Scale 5

        $payee->residencyStatus = Payee::RESIDENT;
        $payee->medicareLevyExemption = Payee::MEDICARE_LEVY_EXEMPTION_FULL;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale5, $payg->getTaxWithheldAmount());

        // Scale 6

        $payee->medicareLevyExemption = Payee::MEDICARE_LEVY_EXEMPTION_HALF;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale6, $payg->getTaxWithheldAmount());
    }

    /**
     * @return array<int, array<int|float, int|float>>
     */
    public function weeklyData(): array
    {
        return [
            [116, 19.00, 0.00, 35.00, 0.00, 0.00],
            [117, 19.00, 0.00, 35.00, 0.00, 0.00],
            [149, 24.00, 0.00, 45.00, 0.00, 0.00],
            [150, 24.00, 0.00, 45.00, 0.00, 0.00],
            [249, 45.00, 0.00, 75.00, 0.00, 0.00],
            [250, 45.00, 0.00, 75.00, 0.00, 0.00],
            [360, 69.00, 0.00, 108.00, 0.00, 0.00],
            [361, 69.00, 0.00, 108.00, 0.00, 0.00],
            [370, 71.00, 2.00, 111.00, 2.00, 2.00],
            [371, 71.00, 2.00, 111.00, 2.00, 2.00],
            [499, 95.00, 22.00, 150.00, 22.00, 22.00],
            [500, 95.00, 22.00, 150.00, 22.00, 22.00],
            [514, 98.00, 26.00, 154.00, 25.00, 25.00],
            [515, 98.00, 26.00, 154.00, 25.00, 25.00],
            [624, 133.00, 55.00, 187.00, 42.00, 42.00],
            [625, 134.00, 55.00, 187.00, 42.00, 42.00],
            [720, 164.00, 72.00, 216.00, 58.00, 58.00],
            [721, 165.00, 72.00, 216.00, 58.00, 58.00],
            [842, 204.00, 95.00, 253.00, 78.00, 78.00],
            [843, 204.00, 95.00, 253.00, 78.00, 78.00],
            [865, 211.00, 99.00, 259.00, 82.00, 83.00],
            [866, 212.00, 100.00, 260.00, 82.00, 84.00],
            [931, 233.00, 121.00, 279.00, 102.00, 107.00],
            [932, 233.00, 121.00, 280.00, 102.00, 107.00],
            [937, 234.00, 123.00, 281.00, 104.00, 109.00],
            [938, 235.00, 123.00, 281.00, 104.00, 109.00],
            [1052, 288.00, 160.00, 316.00, 139.00, 149.00],
            [1053, 289.00, 160.00, 316.00, 139.00, 150.00],
            [1281, 396.00, 234.00, 384.00, 208.00, 221.00],
            [1282, 397.00, 234.00, 385.00, 208.00, 221.00],
            [1287, 399.00, 236.00, 386.00, 210.00, 223.00],
            [1288, 399.00, 236.00, 387.00, 210.00, 223.00],
            [1691, 589.00, 425.00, 568.00, 392.00, 408.00],
            [1692, 589.00, 426.00, 569.00, 392.00, 409.00],
            [1813, 646.00, 483.00, 623.00, 446.00, 465.00],
            [1814, 647.00, 483.00, 623.00, 447.00, 465.00],
            [1816, 647.00, 484.00, 624.00, 448.00, 466.00],
            [1817, 648.00, 485.00, 625.00, 448.00, 466.00],
            [1844, 661.00, 497.00, 637.00, 460.00, 479.00],
            [1845, 661.00, 498.00, 637.00, 461.00, 479.00],
            [1926, 699.00, 536.00, 674.00, 497.00, 517.00],
            [1943, 707.00, 544.00, 682.00, 505.00, 524.00],
            [1944, 708.00, 544.00, 682.00, 505.00, 525.00],
            [2041, 753.00, 590.00, 726.00, 549.00, 569.00],
            [2042, 754.00, 590.00, 726.00, 549.00, 570.00],
            [2044, 755.00, 591.00, 727.00, 550.00, 571.00],
            [2052, 758.00, 595.00, 731.00, 554.00, 575.00],
            [2053, 759.00, 596.00, 731.00, 554.00, 575.00],
            [2082, 773.00, 609.00, 744.00, 567.00, 588.00],
            [2119, 791.00, 627.00, 761.00, 584.00, 605.00],
            [2120, 792.00, 627.00, 761.00, 585.00, 606.00],
            [2163, 813.00, 647.00, 781.00, 604.00, 626.00],
            [2164, 813.00, 648.00, 781.00, 604.00, 626.00],
            [2227, 844.00, 677.00, 809.00, 633.00, 655.00],
            [2228, 845.00, 678.00, 810.00, 633.00, 655.00],
            [2245, 853.00, 686.00, 817.00, 641.00, 663.00],
            [2246, 854.00, 686.00, 818.00, 641.00, 664.00],
            [2293, 880.00, 708.00, 839.00, 662.00, 685.00],
            [2294, 880.00, 709.00, 839.00, 663.00, 686.00],
            [2381, 929.00, 750.00, 879.00, 702.00, 726.00],
            [2382, 930.00, 750.00, 879.00, 702.00, 726.00],
            [2402, 941.00, 760.00, 888.00, 711.00, 736.00],
            [2403, 941.00, 760.00, 889.00, 712.00, 736.00],
            [2431, 957.00, 774.00, 902.00, 725.00, 749.00],
            [2432, 958.00, 774.00, 902.00, 726.00, 750.00],
            [2490, 990.00, 803.00, 929.00, 753.00, 778.00],
            [2491, 991.00, 803.00, 930.00, 753.00, 778.00],
            [2545, 1021.00, 830.00, 955.00, 779.00, 804.00],
            [2546, 1022.00, 830.00, 956.00, 779.00, 805.00],
            [2577, 1039.00, 845.00, 970.00, 794.00, 820.00],
            [2578, 1039.00, 846.00, 971.00, 794.00, 820.00],
            [2595, 1049.00, 854.00, 979.00, 802.00, 828.00],
            [2596, 1050.00, 855.00, 979.00, 803.00, 829.00],
            [2596, 1050.00, 855.00, 979.00, 803.00, 829.00],
            [2597, 1050.00, 855.00, 980.00, 803.00, 829.00],
            [2652, 1077.00, 886.00, 1010.00, 833.00, 859.00],
            [2653, 1078.00, 887.00, 1010.00, 834.00, 860.00],
            [2719, 1110.00, 924.00, 1046.00, 869.00, 896.00],
            [2720, 1110.00, 924.00, 1046.00, 870.00, 897.00],
            [2731, 1116.00, 930.00, 1052.00, 876.00, 903.00],
            [2732, 1116.00, 931.00, 1053.00, 876.00, 903.00],
            [2736, 1118.00, 933.00, 1055.00, 878.00, 906.00],
            [2737, 1119.00, 934.00, 1055.00, 879.00, 906.00],
            [2895, 1196.00, 1022.00, 1141.00, 964.00, 993.00],
            [2896, 1197.00, 1023.00, 1141.00, 965.00, 994.00],
            [2898, 1198.00, 1024.00, 1142.00, 966.00, 995.00],
            [2899, 1198.00, 1024.00, 1143.00, 966.00, 995.00],
            [3069, 1281.00, 1120.00, 1235.00, 1058.00, 1089.00],
            [3070, 1282.00, 1120.00, 1235.00, 1059.00, 1089.00],
            [3302, 1396.00, 1250.00, 1361.00, 1184.00, 1217.00],
            [3303, 1396.00, 1251.00, 1361.00, 1185.00, 1218.00],
            [3446, 1478.00, 1331.00, 1438.00, 1262.00, 1296.00],
            [3447, 1478.00, 1331.00, 1439.00, 1262.00, 1297.00],
            [3652, 1595.00, 1432.00, 1535.00, 1359.00, 1395.00],
            [3653, 1596.00, 1432.00, 1536.00, 1359.00, 1396.00],
        ];
    }

    /**
     * @dataProvider fortnightlyData
     */
    public function testFortnightlyWithholding(
        int $gross,
        float $scale1,
        float $scale2,
        float $scale3,
        float $scale5,
        float $scale6
    ): void {
        $payer = new Payer();

        $payee = new Payee();
        $payee->payCycle = Payee::PAY_CYCLE_FORTNIGHTLY;
        $payee->residencyStatus = Payee::RESIDENT;
        $payee->tfn = true;
        $payee->claimsTaxFreeThreshold = false;
        $payee->stsl = true;

        $earning = new Earning();
        $earning->date = new \DateTime('2025-09-30');
        $earning->gross = $gross;

        // Scale 1

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale1, $payg->getTaxWithheldAmount());

        // Scale 2

        $payee->claimsTaxFreeThreshold = true;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale2, $payg->getTaxWithheldAmount());

        // Scale 3

        $payee->residencyStatus = Payee::FOREIGN_RESIDENT;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale3, $payg->getTaxWithheldAmount());

        // Scale 5

        $payee->residencyStatus = Payee::RESIDENT;
        $payee->medicareLevyExemption = Payee::MEDICARE_LEVY_EXEMPTION_FULL;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale5, $payg->getTaxWithheldAmount());

        // Scale 6

        $payee->medicareLevyExemption = Payee::MEDICARE_LEVY_EXEMPTION_HALF;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale6, $payg->getTaxWithheldAmount());
    }

    /**
     * @return array<int, array<int|float, int|float>>
     */
    public function fortnightlyData(): array
    {
        return [
            [232, 38.00, 0.00, 70.00, 0.00, 0.00],
            [234, 38.00, 0.00, 70.00, 0.00, 0.00],
            [298, 48.00, 0.00, 90.00, 0.00, 0.00],
            [300, 48.00, 0.00, 90.00, 0.00, 0.00],
            [498, 90.00, 0.00, 150.00, 0.00, 0.00],
            [500, 90.00, 0.00, 150.00, 0.00, 0.00],
            [720, 138.00, 0.00, 216.00, 0.00, 0.00],
            [722, 138.00, 0.00, 216.00, 0.00, 0.00],
            [740, 142.00, 4.00, 222.00, 4.00, 4.00],
            [742, 142.00, 4.00, 222.00, 4.00, 4.00],
            [998, 190.00, 44.00, 300.00, 44.00, 44.00],
            [1000, 190.00, 44.00, 300.00, 44.00, 44.00],
            [1028, 196.00, 52.00, 308.00, 50.00, 50.00],
            [1030, 196.00, 52.00, 308.00, 50.00, 50.00],
            [1248, 266.00, 110.00, 374.00, 84.00, 84.00],
            [1250, 268.00, 110.00, 374.00, 84.00, 84.00],
            [1440, 328.00, 144.00, 432.00, 116.00, 116.00],
            [1442, 330.00, 144.00, 432.00, 116.00, 116.00],
            [1684, 408.00, 190.00, 506.00, 156.00, 156.00],
            [1686, 408.00, 190.00, 506.00, 156.00, 156.00],
            [1730, 422.00, 198.00, 518.00, 164.00, 166.00],
            [1732, 424.00, 200.00, 520.00, 164.00, 168.00],
            [1862, 466.00, 242.00, 558.00, 204.00, 214.00],
            [1864, 466.00, 242.00, 560.00, 204.00, 214.00],
            [1874, 468.00, 246.00, 562.00, 208.00, 218.00],
            [1876, 470.00, 246.00, 562.00, 208.00, 218.00],
            [2104, 576.00, 320.00, 632.00, 278.00, 298.00],
            [2106, 578.00, 320.00, 632.00, 278.00, 300.00],
            [2562, 792.00, 468.00, 768.00, 416.00, 442.00],
            [2564, 794.00, 468.00, 770.00, 416.00, 442.00],
            [2574, 798.00, 472.00, 772.00, 420.00, 446.00],
            [2576, 798.00, 472.00, 774.00, 420.00, 446.00],
            [3382, 1178.00, 850.00, 1136.00, 784.00, 816.00],
            [3384, 1178.00, 852.00, 1138.00, 784.00, 818.00],
            [3626, 1292.00, 966.00, 1246.00, 892.00, 930.00],
            [3628, 1294.00, 966.00, 1246.00, 894.00, 930.00],
            [3632, 1294.00, 968.00, 1248.00, 896.00, 932.00],
            [3634, 1296.00, 970.00, 1250.00, 896.00, 932.00],
            [3688, 1322.00, 994.00, 1274.00, 920.00, 958.00],
            [3690, 1322.00, 996.00, 1274.00, 922.00, 958.00],
            [3852, 1398.00, 1072.00, 1348.00, 994.00, 1034.00],
            [3886, 1414.00, 1088.00, 1364.00, 1010.00, 1048.00],
            [3888, 1416.00, 1088.00, 1364.00, 1010.00, 1050.00],
            [4082, 1506.00, 1180.00, 1452.00, 1098.00, 1138.00],
            [4084, 1508.00, 1180.00, 1452.00, 1098.00, 1140.00],
            [4088, 1510.00, 1182.00, 1454.00, 1100.00, 1142.00],
            [4104, 1516.00, 1190.00, 1462.00, 1108.00, 1150.00],
            [4106, 1518.00, 1192.00, 1462.00, 1108.00, 1150.00],
            [4164, 1546.00, 1218.00, 1488.00, 1134.00, 1176.00],
            [4238, 1582.00, 1254.00, 1522.00, 1168.00, 1210.00],
            [4240, 1584.00, 1254.00, 1522.00, 1170.00, 1212.00],
            [4326, 1626.00, 1294.00, 1562.00, 1208.00, 1252.00],
            [4328, 1626.00, 1296.00, 1562.00, 1208.00, 1252.00],
            [4454, 1688.00, 1354.00, 1618.00, 1266.00, 1310.00],
            [4456, 1690.00, 1356.00, 1620.00, 1266.00, 1310.00],
            [4490, 1706.00, 1372.00, 1634.00, 1282.00, 1326.00],
            [4492, 1708.00, 1372.00, 1636.00, 1282.00, 1328.00],
            [4586, 1760.00, 1416.00, 1678.00, 1324.00, 1370.00],
            [4588, 1760.00, 1418.00, 1678.00, 1326.00, 1372.00],
            [4762, 1858.00, 1500.00, 1758.00, 1404.00, 1452.00],
            [4764, 1860.00, 1500.00, 1758.00, 1404.00, 1452.00],
            [4804, 1882.00, 1520.00, 1776.00, 1422.00, 1472.00],
            [4806, 1882.00, 1520.00, 1778.00, 1424.00, 1472.00],
            [4862, 1914.00, 1548.00, 1804.00, 1450.00, 1498.00],
            [4864, 1916.00, 1548.00, 1804.00, 1452.00, 1500.00],
            [4980, 1980.00, 1606.00, 1858.00, 1506.00, 1556.00],
            [4982, 1982.00, 1606.00, 1860.00, 1506.00, 1556.00],
            [5090, 2042.00, 1660.00, 1910.00, 1558.00, 1608.00],
            [5092, 2044.00, 1660.00, 1912.00, 1558.00, 1610.00],
            [5154, 2078.00, 1690.00, 1940.00, 1588.00, 1640.00],
            [5156, 2078.00, 1692.00, 1942.00, 1588.00, 1640.00],
            [5190, 2098.00, 1708.00, 1958.00, 1604.00, 1656.00],
            [5192, 2100.00, 1710.00, 1958.00, 1606.00, 1658.00],
            [5192, 2100.00, 1710.00, 1958.00, 1606.00, 1658.00],
            [5194, 2100.00, 1710.00, 1960.00, 1606.00, 1658.00],
            [5304, 2154.00, 1772.00, 2020.00, 1666.00, 1718.00],
            [5306, 2156.00, 1774.00, 2020.00, 1668.00, 1720.00],
            [5438, 2220.00, 1848.00, 2092.00, 1738.00, 1792.00],
            [5440, 2220.00, 1848.00, 2092.00, 1740.00, 1794.00],
            [5462, 2232.00, 1860.00, 2104.00, 1752.00, 1806.00],
            [5464, 2232.00, 1862.00, 2106.00, 1752.00, 1806.00],
            [5472, 2236.00, 1866.00, 2110.00, 1756.00, 1812.00],
            [5474, 2238.00, 1868.00, 2110.00, 1758.00, 1812.00],
            [5790, 2392.00, 2044.00, 2282.00, 1928.00, 1986.00],
            [5792, 2394.00, 2046.00, 2282.00, 1930.00, 1988.00],
            [5796, 2396.00, 2048.00, 2284.00, 1932.00, 1990.00],
            [5798, 2396.00, 2048.00, 2286.00, 1932.00, 1990.00],
            [6138, 2562.00, 2240.00, 2470.00, 2116.00, 2178.00],
            [6140, 2564.00, 2240.00, 2470.00, 2118.00, 2178.00],
            [6604, 2792.00, 2500.00, 2722.00, 2368.00, 2434.00],
            [6606, 2792.00, 2502.00, 2722.00, 2370.00, 2436.00],
            [6892, 2956.00, 2662.00, 2876.00, 2524.00, 2592.00],
            [6894, 2956.00, 2662.00, 2878.00, 2524.00, 2594.00],
            [7304, 3190.00, 2864.00, 3070.00, 2718.00, 2790.00],
            [7306, 3192.00, 2864.00, 3072.00, 2718.00, 2792.00],
        ];
    }

    /**
     * @dataProvider monthlyData
     */
    public function testMonthlyWithholding(
        float $gross,
        float $scale1,
        float $scale2,
        float $scale3,
        float $scale5,
        float $scale6
    ): void {
        $payer = new Payer();

        $payee = new Payee();
        $payee->payCycle = Payee::PAY_CYCLE_MONTHLY;
        $payee->residencyStatus = Payee::RESIDENT;
        $payee->tfn = true;
        $payee->claimsTaxFreeThreshold = false;
        $payee->stsl = true;

        $earning = new Earning();
        $earning->date = new \DateTime('2025-09-30');
        $earning->gross = $gross;

        // Scale 1

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale1, $payg->getTaxWithheldAmount());

        // Scale 2

        $payee->claimsTaxFreeThreshold = true;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale2, $payg->getTaxWithheldAmount());

        // Scale 3

        $payee->residencyStatus = Payee::FOREIGN_RESIDENT;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale3, $payg->getTaxWithheldAmount());

        // Scale 5

        $payee->residencyStatus = Payee::RESIDENT;
        $payee->medicareLevyExemption = Payee::MEDICARE_LEVY_EXEMPTION_FULL;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale5, $payg->getTaxWithheldAmount());

        // Scale 6

        $payee->medicareLevyExemption = Payee::MEDICARE_LEVY_EXEMPTION_HALF;

        $payg = PaygTax::new()
            ->setPayer($payer)
            ->setPayee($payee)
            ->setEarning($earning);

        Assert::assertEquals($scale6, $payg->getTaxWithheldAmount());
    }

    /**
     * @return array<int, array<int|float, int|float>>
     */
    public function monthlyData(): array
    {
        return [
            [502.67, 82.00, 0.00, 152.00, 0.00, 0.00],
            [507.00, 82.00, 0.00, 152.00, 0.00, 0.00],
            [645.67, 104.00, 0.00, 195.00, 0.00, 0.00],
            [650.00, 104.00, 0.00, 195.00, 0.00, 0.00],
            [1079.00, 195.00, 0.00, 325.00, 0.00, 0.00],
            [1083.33, 195.00, 0.00, 325.00, 0.00, 0.00],
            [1560.00, 299.00, 0.00, 468.00, 0.00, 0.00],
            [1564.33, 299.00, 0.00, 468.00, 0.00, 0.00],
            [1603.33, 308.00, 9.00, 481.00, 9.00, 9.00],
            [1607.67, 308.00, 9.00, 481.00, 9.00, 9.00],
            [2162.33, 412.00, 95.00, 650.00, 95.00, 95.00],
            [2166.67, 412.00, 95.00, 650.00, 95.00, 95.00],
            [2227.33, 425.00, 113.00, 667.00, 108.00, 108.00],
            [2231.67, 425.00, 113.00, 667.00, 108.00, 108.00],
            [2704.00, 576.00, 238.00, 810.00, 182.00, 182.00],
            [2708.33, 581.00, 238.00, 810.00, 182.00, 182.00],
            [3120.00, 711.00, 312.00, 936.00, 251.00, 251.00],
            [3124.33, 715.00, 312.00, 936.00, 251.00, 251.00],
            [3648.67, 884.00, 412.00, 1096.00, 338.00, 338.00],
            [3653.00, 884.00, 412.00, 1096.00, 338.00, 338.00],
            [3748.33, 914.00, 429.00, 1122.00, 355.00, 360.00],
            [3752.67, 919.00, 433.00, 1127.00, 355.00, 364.00],
            [4034.33, 1010.00, 524.00, 1209.00, 442.00, 464.00],
            [4038.67, 1010.00, 524.00, 1213.00, 442.00, 464.00],
            [4060.33, 1014.00, 533.00, 1218.00, 451.00, 472.00],
            [4064.67, 1018.00, 533.00, 1218.00, 451.00, 472.00],
            [4558.67, 1248.00, 693.00, 1369.00, 602.00, 646.00],
            [4563.00, 1252.00, 693.00, 1369.00, 602.00, 650.00],
            [5551.00, 1716.00, 1014.00, 1664.00, 901.00, 958.00],
            [5555.33, 1720.00, 1014.00, 1668.00, 901.00, 958.00],
            [5577.00, 1729.00, 1023.00, 1673.00, 910.00, 966.00],
            [5581.33, 1729.00, 1023.00, 1677.00, 910.00, 966.00],
            [7327.67, 2552.00, 1842.00, 2461.00, 1699.00, 1768.00],
            [7332.00, 2552.00, 1846.00, 2466.00, 1699.00, 1772.00],
            [7856.33, 2799.00, 2093.00, 2700.00, 1933.00, 2015.00],
            [7860.67, 2804.00, 2093.00, 2700.00, 1937.00, 2015.00],
            [7869.33, 2804.00, 2097.00, 2704.00, 1941.00, 2019.00],
            [7873.67, 2808.00, 2102.00, 2708.00, 1941.00, 2019.00],
            [7990.67, 2864.00, 2154.00, 2760.00, 1993.00, 2076.00],
            [7995.00, 2864.00, 2158.00, 2760.00, 1998.00, 2076.00],
            [8346.00, 3029.00, 2323.00, 2921.00, 2154.00, 2240.00],
            [8419.67, 3064.00, 2357.00, 2955.00, 2188.00, 2271.00],
            [8424.00, 3068.00, 2357.00, 2955.00, 2188.00, 2275.00],
            [8844.33, 3263.00, 2557.00, 3146.00, 2379.00, 2466.00],
            [8848.67, 3267.00, 2557.00, 3146.00, 2379.00, 2470.00],
            [8857.33, 3272.00, 2561.00, 3150.00, 2383.00, 2474.00],
            [8892.00, 3285.00, 2578.00, 3168.00, 2401.00, 2492.00],
            [8896.33, 3289.00, 2583.00, 3168.00, 2401.00, 2492.00],
            [9022.00, 3350.00, 2639.00, 3224.00, 2457.00, 2548.00],
            [9182.33, 3428.00, 2717.00, 3298.00, 2531.00, 2622.00],
            [9186.67, 3432.00, 2717.00, 3298.00, 2535.00, 2626.00],
            [9373.00, 3523.00, 2804.00, 3384.00, 2617.00, 2713.00],
            [9377.33, 3523.00, 2808.00, 3384.00, 2617.00, 2713.00],
            [9650.33, 3657.00, 2934.00, 3506.00, 2743.00, 2838.00],
            [9654.67, 3662.00, 2938.00, 3510.00, 2743.00, 2838.00],
            [9728.33, 3696.00, 2973.00, 3540.00, 2778.00, 2873.00],
            [9732.67, 3701.00, 2973.00, 3545.00, 2778.00, 2877.00],
            [9936.33, 3813.00, 3068.00, 3636.00, 2869.00, 2968.00],
            [9940.67, 3813.00, 3072.00, 3636.00, 2873.00, 2973.00],
            [10317.67, 4026.00, 3250.00, 3809.00, 3042.00, 3146.00],
            [10322.00, 4030.00, 3250.00, 3809.00, 3042.00, 3146.00],
            [10408.67, 4078.00, 3293.00, 3848.00, 3081.00, 3189.00],
            [10413.00, 4078.00, 3293.00, 3852.00, 3085.00, 3189.00],
            [10534.33, 4147.00, 3354.00, 3909.00, 3142.00, 3246.00],
            [10538.67, 4151.00, 3354.00, 3909.00, 3146.00, 3250.00],
            [10790.00, 4290.00, 3480.00, 4026.00, 3263.00, 3371.00],
            [10794.33, 4294.00, 3480.00, 4030.00, 3263.00, 3371.00],
            [11028.33, 4424.00, 3597.00, 4138.00, 3376.00, 3484.00],
            [11032.67, 4429.00, 3597.00, 4143.00, 3376.00, 3488.00],
            [11167.00, 4502.00, 3662.00, 4203.00, 3441.00, 3553.00],
            [11171.33, 4502.00, 3666.00, 4208.00, 3441.00, 3553.00],
            [11245.00, 4546.00, 3701.00, 4242.00, 3475.00, 3588.00],
            [11249.33, 4550.00, 3705.00, 4242.00, 3480.00, 3592.00],
            [11249.33, 4550.00, 3705.00, 4242.00, 3480.00, 3592.00],
            [11253.67, 4550.00, 3705.00, 4247.00, 3480.00, 3592.00],
            [11492.00, 4667.00, 3839.00, 4377.00, 3610.00, 3722.00],
            [11496.33, 4671.00, 3844.00, 4377.00, 3614.00, 3727.00],
            [11782.33, 4810.00, 4004.00, 4533.00, 3766.00, 3883.00],
            [11786.67, 4810.00, 4004.00, 4533.00, 3770.00, 3887.00],
            [11834.33, 4836.00, 4030.00, 4559.00, 3796.00, 3913.00],
            [11838.67, 4836.00, 4034.00, 4563.00, 3796.00, 3913.00],
            [11856.00, 4845.00, 4043.00, 4572.00, 3805.00, 3926.00],
            [11860.33, 4849.00, 4047.00, 4572.00, 3809.00, 3926.00],
            [12545.00, 5183.00, 4429.00, 4944.00, 4177.00, 4303.00],
            [12549.33, 5187.00, 4433.00, 4944.00, 4182.00, 4307.00],
            [12558.00, 5191.00, 4437.00, 4949.00, 4186.00, 4312.00],
            [12562.33, 5191.00, 4437.00, 4953.00, 4186.00, 4312.00],
            [13299.00, 5551.00, 4853.00, 5352.00, 4585.00, 4719.00],
            [13303.33, 5555.00, 4853.00, 5352.00, 4589.00, 4719.00],
            [14308.67, 6049.00, 5417.00, 5898.00, 5131.00, 5274.00],
            [14313.00, 6049.00, 5421.00, 5898.00, 5135.00, 5278.00],
            [14932.67, 6405.00, 5768.00, 6231.00, 5469.00, 5616.00],
            [14937.00, 6405.00, 5768.00, 6236.00, 5469.00, 5620.00],
            [15825.33, 6912.00, 6205.00, 6652.00, 5889.00, 6045.00],
            [15829.67, 6916.00, 6205.00, 6656.00, 5889.00, 6049.00],
        ];
    }
}
